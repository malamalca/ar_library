! **** POLYGONIA  **** !! ** A.Muttenthaler ** !! ** modified by GS ** !if n<2 then end! -------------------------hotspots--------------------------x00 = x[n-1]y00 = y[n-1]x0 = x[n]y0 = y[n]hotspot2 0   ,0for i = 1 to n	hotspot2 0   ,y[i],i*12  ,x[i],129	hotspot2 x[i],y[i],i*12+1,x[i],2	hotspot2 -1  ,y[i],i*12+2,x[i],3	hotspot2 x[i],0   ,i*12+3,y[i],129	hotspot2 x[i],y[i],i*12+4,y[i],2	hotspot2 x[i],-1  ,i*12+5,y[i],3	if i>1 then		xins = (x0-x[i])/2		yins = (y0-y[i])/2		hotspot2 0          ,yins + y[i],i*12+6 ,xe[i],129		hotspot2 xins + x[i],yins + y[i],i*12+7 ,xe[i],2		hotspot2 -1         ,yins + y[i],i*12+8 ,xe[i],3		hotspot2 xins + x[i],0          ,i*12+9 ,ye[i],129		hotspot2 xins + x[i],yins + y[i],i*12+10 ,ye[i],2		hotspot2 xins + x[i],-1         ,i*12+11,ye[i],3	endif	x00 = x0	y00 = y0	x0 = x[i]	y0 = y[i]next ii = n	diagl = sqr((x[i-1]-x[i])^2 +(y[i-1]-y[i])^2)	xins = -(x[i-1]-x[i])/diagl*marx	yins = -(y[i-1]-y[i])/diagl*marxhotspot2 0          ,yins + y[i+1],(i+1)*12+5 ,xe[i+1],129hotspot2 xins + x[i+1],yins + y[i+1],(i+1)*12+6 ,xe[i+1],2hotspot2 -1         ,yins + y[i+1],(i+1)*12+7 ,xe[i+1],3hotspot2 xins + x[i+1],0          ,(i+1)*12+8 ,ye[i+1],129hotspot2 xins + x[i+1],yins + y[i+1],(i+1)*12+9 ,ye[i+1],2hotspot2 xins + x[i+1],-1         ,(i+1)*12+10,ye[i+1],3!----------------------ende hotspots-----------------------!-------------------------polygon--------------------------set fill polyfillif numpolygon then	x0 = x[n]	y0 = y[n]	top_thk = A/2 + offset	bottom_thk = A/2 - offset	for i = 1 to n		if i > 1 then			if showaxis then				pen polypen				set line_type polylinetype					line2 		x0, y0, x[i], y[i]				hotline2 	x0, y0, x[i], y[i]			endif			pen offsetpen			set line_type offsetlinetype			! calculate top offset intersection			add2 x[i], y[i]			rot2 w[i] - 180			if i = n then				mid_angle = 90			else				mid_angle = (180 - ((w[i+1]) - (w[i]))) / 2			endif									! this is top segment separator line			offs_top_x = top_thk / tan(mid_angle)			offs_top_y = -top_thk			offs_bottom_x = -bottom_thk / tan(mid_angle)			offs_bottom_y = bottom_thk			if showseparatorlines then				line2 offs_top_x, offs_top_y, offs_bottom_x, offs_bottom_y			endif			del 2			! convert to global coordinate system			tran_angle = -(w[i] - 180)			tran_top_x = x[i] + offs_top_x * cos(tran_angle) + offs_top_y * sin(tran_angle)			tran_top_y = y[i] - offs_top_x * sin(tran_angle) + offs_top_y * cos(tran_angle)			tran_bottom_x = x[i] + offs_bottom_x * cos(tran_angle) + offs_bottom_y * sin(tran_angle)			tran_bottom_y = y[i] - offs_bottom_x * sin(tran_angle) + offs_bottom_y * cos(tran_angle)			! draw offset lines			if showoffset then				line2 prev_top_x, prev_top_y,  tran_top_x, tran_top_y				line2 prev_bottom_x, prev_bottom_y,  tran_bottom_x, tran_bottom_y			endif			! draw fill			if usefill and A > nix then				fill_status = 2+4				if polyfillalign then					fill_status = fill_status + 8				endif				poly2_b{2} 4, fill_status, 					polyfillpen, polyfillbgpen,					x[i], y[i], w[i] - 180,					prev_top_x, prev_top_y, 15,					tran_top_x, tran_top_y, 15,					tran_bottom_x, tran_bottom_y, 15,					prev_bottom_x, prev_bottom_y, 15			endif							! store for next step			prev_top_x = tran_top_x			prev_top_y = tran_top_y			prev_bottom_x = tran_bottom_x			prev_bottom_y = tran_bottom_y					else			line_k = (y[i+1] - y[i]) / (x[i+1] - x[i])			line_angle = atn(line_k)			!text2 0,0, str(line_angle, 12,8)						! offset line			prev_top_x =  x[i] - sin(line_angle) * top_thk			prev_top_y =  y[i] + cos(line_angle) * top_thk			prev_bottom_x =  x[i] + sin(line_angle) * bottom_thk			prev_bottom_y =  y[i] - cos(line_angle) * bottom_thk				if showseparatorlines then				pen offsetpen				set line_type offsetlinetype				line2 prev_bottom_x, prev_bottom_y, prev_top_x, prev_top_y			endif		endif		x0 = x[i]		y0 = y[i]	next iendif!----------------------ende polygon-----------------------!-------------------------polygon length ------------------!text2 x[i], y[i], rgesend