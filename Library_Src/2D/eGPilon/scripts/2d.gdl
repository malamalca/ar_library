unId = 1!rot2 -SYMB_ROTANGLEadd2 originX, originYrot2 originAngleoriginMarkerSize = 1! y axisline2 -originMarkerSize/2, -originMarkerSize/2, -originMarkerSize/2, originMarkerSizeline2 originMarkerSize/2, -originMarkerSize/2, originMarkerSize/2, originMarkerSizeline2 -originMarkerSize/2, originMarkerSize, 0, originMarkerSize * 3/2line2 originMarkerSize/2, originMarkerSize, 0, originMarkerSize * 3/2! x axisline2 -originMarkerSize/2, -originMarkerSize/2, originMarkerSize, -originMarkerSize/2line2 -originMarkerSize/2, originMarkerSize/2, originMarkerSize, originMarkerSize/2line2 originMarkerSize, originMarkerSize/2, originMarkerSize * 3/2, 0line2 originMarkerSize, -originMarkerSize/2, originMarkerSize * 3/2, 0! x signline2 originMarkerSize/2 + originMarkerSize/4, -originMarkerSize/4, originMarkerSize, originMarkerSize/4line2 originMarkerSize/2 + originMarkerSize/4, originMarkerSize/4, originMarkerSize, -originMarkerSize/4del top! origin marker positionhotspot2 originX, 0, unId, originY, 1+128		: unId = unId + 1hotspot2 originX, -1, unId, originY, 3			: unId = unId + 1hotspot2 originX, originY, unId, originY, 2		: unId = unId + 1hotspot2 0, originY, unId, originX, 1+128		: unId = unId + 1hotspot2 -1, originY, unId, originX, 3			: unId = unId + 1hotspot2 originX, originY, unId, originX, 2		: unId = unId + 1! origin marker anglehotspot2 originX + originMarkerSize/2, originY, unId, originAngle, 4+128: unId = unId + 1hotspot2 originX + originMarkerSize/2 * COS(originAngle), originY + originMarkerSize/2 * SIN(originAngle), unId, originAngle, 5: unId = unId + 1hotspot2 originX, originY, unId, originAngle, 6: unId = unId + 1hotspot2 originX + originMarkerSize/2, 0, unId, originAngle, 7: unId = unId + 1! **** POLYGONIA  **** !! ** A.Muttenthaler ** !! ** modified by GS ** !if n[polyKind] < 2 then end! -------------------------hotspots--------------------------x0 = x[polyKind][n[polyKind]]y0 = y[polyKind][n[polyKind]]hotspot2 0, 0: unId = unId + 1breakpoint 1for i = 1 to n[polyKind]	hotspot2 0,					y[polyKind][i],	unId,	x[polyKind][i],	129		: unId = unId + 1	hotspot2 x[polyKind][i],	y[polyKind][i],	unId,	x[polyKind][i],	2		: unId = unId + 1	hotspot2 -1,				y[polyKind][i],	unId,	x[polyKind][i],	3		: unId = unId + 1	hotspot2 x[polyKind][i],	0,				unId,	y[polyKind][i],	129		: unId = unId + 1	hotspot2 x[polyKind][i],	y[polyKind][i],	unId,	y[polyKind][i],	2		: unId = unId + 1	hotspot2 x[polyKind][i],	-1,				unId,	y[polyKind][i],	3		: unId = unId + 1	!! insert NEW hotspot in the middle	xins = (x0 - x[polyKind][i]) / 2	yins = (y0 - y[polyKind][i]) / 2	hotspot2 0,						yins + y[polyKind][i],	unId,	xe[i],	129		: unId = unId + 1	hotspot2 xins + x[polyKind][i],	yins + y[polyKind][i],	unId,	xe[i],	2		: unId = unId + 1	hotspot2 -1,					yins + y[polyKind][i],	unId,	xe[i],	3		: unId = unId + 1	hotspot2 xins + x[polyKind][i],	0,						unId,	ye[i],	129		: unId = unId + 1	hotspot2 xins + x[polyKind][i],	yins + y[polyKind][i],	unId,	ye[i],	2		: unId = unId + 1	hotspot2 xins + x[polyKind][i],	-1,						unId,	ye[i],	3		: unId = unId + 1	x0 = x[polyKind][i]	y0 = y[polyKind][i]next i!----------------------ende hotspots----------------------------!-------------------------basement polygon----------------------! draw building projection polyparameterIndex = POLYKIND_BASEMENTpolyIndex = POLYKIND_BASEMENTif basementEqualsBase then	polyIndex = POLYKIND_BASEendifstoryIndex = STORY_HOMEgosub "drawPolygon"!----------------------end basement polygon---------------------!-------------------------building polygon----------------------! draw building projection polyparameterIndex = POLYKIND_BUILDINGpolyIndex = POLYKIND_BUILDINGif buildingEqualsBase then	polyIndex = POLYKIND_BASEendifstoryIndex = STORY_HOMEgosub "drawPolygon"!----------------------end building polygon---------------------!-------------------------base polygon--------------------------parameterIndex = POLYKIND_BASEpolyIndex = POLYKIND_BASEstoryIndex = STORY_HOMEgosub "drawPolygon"!	DEFINE STYLE "Internal" text_font, 3 / GLOB_SCALE * 100, 5, 0!	ret = REQUEST ("Linear_dimension", "", dim_format)!	SET STYLE "Internal"!!	dXOrigin = originX * cos(originAngle) + originY * sin(originAngle)!	dYOrigin = -originX  * sin(originAngle) + originY  * cos(originAngle)!!	x0 = x[polyIndex][n[polyIndex]]!	y0 = y[polyIndex][n[polyIndex]]!	for i = 1 to n[polyIndex]!		dX = x[polyIndex][i] * cos(originAngle) + y[polyIndex][i] * sin(originAngle)!		dY = -x[polyIndex][i]  * sin(originAngle) + y[polyIndex][i] * cos(originAngle)!!		string = "X="+STR(dim_format, GLOB_WORLD_ORIGO_OFFSET_X + baseX + dX - dXOrigin)+"   Y="+STR(dim_format, GLOB_WORLD_ORIGO_OFFSET_Y + baseY + dY - dYOrigin)!!!		TEXT2 x[polyIndex][i], y[polyIndex][i]+0.3, string!	!!	!		x0 = x[polyIndex][i]!		y0 = y[polyIndex][i]!	next i!-------------------------end base polygon----------------------!-------------------------polygon length -----------------------!text2 x[polyKind][i], y[polyKind][i], rgesend!==============================================================="drawPolygon":	if displayByStory[storyIndex][polyIndex] <> DISPLAYKIND_NONE then		pen polyPen[parameterIndex]		set line_type polyLineType[parameterIndex]				x0 = x[polyIndex][n[polyIndex]]		y0 = y[polyIndex][n[polyIndex]]		for i = 1 to n[polyIndex]					if displayByStory[storyIndex][polyIndex] = DISPLAYKIND_FILL then				put x[polyIndex][i], y[polyIndex][i], 15			endif			line2 		x0, y0, x[polyIndex][i], y[polyIndex][i]				hotline2 	x0, y0, x[polyIndex][i], y[polyIndex][i]					x0 = x[polyIndex][i]			y0 = y[polyIndex][i]		next i				if displayByStory[storyIndex][polyIndex] = DISPLAYKIND_FILL then			pen polyPen[parameterIndex]			set fill fillKind[parameterIndex]					fillStatus = 2 + 4			poly2_b n[polyIndex], fillStatus, 				fillPen[parameterIndex], fillPenBg[parameterIndex],				get(n[polyIndex] * 3)		endif	endifreturn