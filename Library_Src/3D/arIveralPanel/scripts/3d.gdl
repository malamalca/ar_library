! modified 2017-06-27! for front and back borders to be ok when rotatedROTY -angleunLId = 1unId = 1HOTSPOT 0,0,0, unId: unId = unId + 1HOTSPOT panelLength,0,0, unId: unId = unId + 1HOTSPOT panelLength,B,0, unId: unId = unId + 1HOTSPOT 0,B,0, unId: unId = unId + 1HOTSPOT 0,0, panelThickness , unId: unId = unId + 1HOTSPOT panelLength,0, panelThickness , unId: unId = unId + 1HOTSPOT panelLength,B, panelThickness , unId: unId = unId + 1HOTSPOT 0,B, panelThickness , unId: unId = unId + 1HOTSPOT panelLength/2, B, 0, unId: unId = unId + 1!HOTSPOT panelLength/2, 0, panelThicknessHOTLINE 0,0,0, panelLength,0,0, unLId: unLId = unLId + 1HOTLINE 0,B,0, panelLength,B,0, unLId: unLId = unLId + 1HOTLINE 0,0,0, 0,B,0, unLId: unLId = unLId + 1HOTLINE panelLength,0,0, panelLength,B,0, unLId: unLId = unLId + 1HOTLINE 0,0, panelThickness, panelLength,0, panelThickness, unLId: unLId = unLId + 1HOTLINE 0,B, panelThickness, panelLength,B, panelThickness, unLId: unLId = unLId + 1HOTLINE 0,0, panelThickness, 0,B, panelThickness, unLId: unLId = unLId + 1HOTLINE panelLength,0, panelThickness, panelLength,B, panelThickness, unLId: unLId = unLId + 1if simple3d then	realLength = panelLength	realDepth = B	frontMaterial = matPanel	IF borderFront > 1 THEN		frontMaterial = matMain 	ENDIF	rightMaterial = matPanel	IF borderRight > 1 THEN		rightMaterial = matMain 	ENDIF	backMaterial = matPanel	IF borderBack > 1 THEN		backMaterial = matMain 	ENDIF	leftMaterial = matPanel	IF borderLeft > 1 THEN		leftMaterial = matMain 	ENDIF	PUT 0,0, 0, 15, frontMaterial	PUT realLength, 0, 0, 15, rightMaterial	PUT realLength, realDepth, 0, 15, backMaterial	PUT 0, realDepth, 0, 15, leftMaterial	PUT 0, 0, 0, -1, frontMaterialelse	realLength = panelLength - borderTypeWidths[borderLeft]  - borderTypeWidths[borderRight]	realDepth = B - borderTypeWidths[borderBack]  - borderTypeWidths[borderFront]	PUT 0,0, 15	PUT realLength, 0, 15	PUT realLength, realDepth, 15	PUT 0, realDepth, 15	PUT 0, 0, -1endifFOR i = 1 TO noHoles  PUT holes[i][1], holes[i][2], 15  PUT holes[i][1] + holes[i][3], holes[i][2], 15  PUT holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], 15  PUT holes[i][1], holes[i][2] + holes[i][4], 15  PUT holes[i][1], holes[i][2], -1  HOTLINE holes[i][1], holes[i][2], 0, holes[i][1] + holes[i][3], holes[i][2], 0, unLId: unLId = unLId + 1  HOTLINE holes[i][1], holes[i][2] + holes[i][4], 0, holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], 0, unLId: unLId = unLId + 1  HOTLINE holes[i][1], holes[i][2], 0, holes[i][1], holes[i][2] + holes[i][3], 0, unLId: unLId = unLId + 1  HOTLINE holes[i][1] + holes[i][3], holes[i][2], 0, holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], 0, unLId: unLId = unLId + 1  HOTLINE holes[i][1], holes[i][2], panelThickness, holes[i][1] + holes[i][3], holes[i][2], panelThickness, unLId: unLId = unLId + 1  HOTLINE holes[i][1], holes[i][2] + holes[i][4], panelThickness, holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], panelThickness, unLId: unLId = unLId + 1  HOTLINE holes[i][1], holes[i][2], panelThickness, holes[i][1], holes[i][2] + holes[i][4], panelThickness, unLId: unLId = unLId + 1  HOTLINE holes[i][1] + holes[i][3], holes[i][2], panelThickness, holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], panelThickness, unLId: unLId = unLId + 1  HOTSPOT holes[i][1], holes[i][2], 0, unId: unId = unId + 1  HOTSPOT holes[i][1] + holes[i][3], holes[i][2], 0, unId: unId = unId + 1  HOTSPOT holes[i][1], holes[i][2] + holes[i][4], 0, unId: unId = unId + 1  HOTSPOT holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], 0, unId: unId = unId + 1  HOTSPOT holes[i][1], holes[i][2], panelThickness, unId: unId = unId + 1  HOTSPOT holes[i][1] + holes[i][3], holes[i][2], panelThickness, unId: unId = unId + 1  HOTSPOT holes[i][1], holes[i][2] + holes[i][4], panelThickness, unId: unId = unId + 1  HOTSPOT holes[i][1] + holes[i][3], holes[i][2] + holes[i][4], panelThickness, unId: unId = unId + 1NEXT iif simple3d then	topMaterial = matPanel	if hasLaminate then		topMaterial = matMain	endif	bottomMaterial = matPanel	if hasLaminate then		bottomMaterial = matMain	endif	CPRISM_{2} topMaterial, bottomMaterial, matPanel,		NSP/5, panelThickness, USE(NSP)else	ADDX borderTypeWidths[borderLeft]	ADDY borderTypeWidths[borderFront]		laminateThickness = 0.0008	if not(hasLaminate) then laminateThickness = 0		if hasLaminate  then		SET MATERIAL matMain		PRISM_ NSP/3, laminateThickness, USE(NSP)	endif		ADDZ laminateThickness	SET MATERIAL matPanel	PRISM_ NSP/3, panelThickness  - laminateThickness * 2, USE(NSP)		ADDZ panelThickness - laminateThickness * 2		if hasLaminate then		SET MATERIAL matMain		PRISM_ NSP/3, laminateThickness, USE(NSP)	endif		DEL 4	IF borderFront > 1 THEN	  SET MATERIAL matMain	  BLOCK panelLength, borderTypeWidths[borderFront], panelThickness	ENDIF		IF borderBack > 1 THEN	  ADDY B-borderTypeWidths[borderBack]	  BLOCK panelLength, borderTypeWidths[borderBack], panelThickness	  DEL 1	ENDIF		IF borderRight > 1 THEN	  ADDX panelLength-borderTypeWidths[borderRight]	  ADDY borderTypeWidths[borderFront]	  BLOCK borderTypeWidths[borderRight], B-borderTypeWidths[borderFront]-borderTypeWidths[borderBack], panelThickness	  DEL 2	ENDIF		IF borderLeft > 1 THEN	  ADDY borderTypeWidths[borderFront]	  BLOCK borderTypeWidths[borderLeft], B-borderTypeWidths[borderFront]-borderTypeWidths[borderBack], panelThickness	  DEL 1	ENDIFendif