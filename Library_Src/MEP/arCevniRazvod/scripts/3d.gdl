uid = 1slopeDeg = ATN(slope/100)PEN penAxisMATERIAL matMODEL SOLIDADDZ A/2! tube shapetubePoints = 3PUT 0, 0, 900PUT A/2, 360, 4001PUT A/2 - wallThickness, 360, 4000HOTSPOT 0, 0, 0!first point reference vectorIF startingCircle THEN	nVerticalNodes = 1	PUT 0, 0, vertHeight + 1, 0	PUT 0, 0, vertHeight, 0	hotspot 0, 0, 0, unId, vertHeight, 1: unId = unId + 1	hotspot 0, 0, vertHeight, unId, vertHeight, 2: unId = unId + 1	hotspot 0, 0, -1, unId, vertHeight, 3: unId = unId + 1ELSE	nVerticalNodes = 0	PUT -1 * COS(directions[1]), 1 * SIN(directions[1]), SIN(slopeDeg), 0ENDIF!first point of pathPUT 0, 0, 0, 0direction = 0 					! direction 0 means upward on y axisprevX = 0prevY = 0prevZ = 0FOR i = 1 TO nSegments	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! JUNCTION ARM	IF (i > 1) AND (ABS(directions[i]) < nix) THEN		junctionLength = minJunctionLength		junctionWidth = minJunctionWidth		IF junctionWidths[i] > minJunctionWidth THEN junctionWidth = junctionWidths[i]		IF junctionWidths[i] > A THEN junctionWidth = A		IF junctionLengths[i] > minJunctionLength THEN junctionLength = junctionLengths[i]		ADD prevX, prevY, prevZ		ROTZ direction		IF ABS(junctions[i]) < nix THEN			!!!! vertical junction			ROTY 90 + slopeDeg			ROTZ 180			! MN :: 2021-10-29 Tube arm should be always vertical			! armcAngle = 90			armcAngle = 90 + slopeDeg		ELSE					ROTY -90 + slopeDeg 			IF junctions[i] < 180 THEN				ROTZ -90				armcAngle = junctions[i]			ELSE 				ROTZ 90				armcAngle = 360-junctions[i]			ENDIF		ENDIF				ARMC A/2, junctionWidth / 2, junctionLength, 0, 0, armcAngle 		HOTSPOT junctionLength * SIN(armcAngle), 0, junctionLength * SIN(armcAngle)		DEL 4	ENDIF	direction = direction + directions[i]		prevX = prevX + segments[i] * COS(direction)	prevY = prevY + segments[i] * SIN(direction)	prevZ = prevZ - segments[i] * TAN(slopeDeg)	HOTSPOT prevX, prevY, prevZ	PUT prevX, prevY, prevZ, 0NEXT i! vector of last surfacePUT prevX + (segments[nSegments] + 1) * COS(direction), prevY + (segments[nSegments] + 1) * SIN(direction), prevZ - (segments[nSegments] + 1) * TAN(slopeDeg), 0! debug hotspot!hotspot prevX + (segments[nSegments] + 1) * COS(direction), prevY + (segments[nSegments] + 1) * SIN(direction), prevZ - (segments[nSegments] + 1) * TAN(slopeDeg): unId = unId + 1pathPointsNum = tubePoints * 3 + (nVerticalNodes + nSegments + 3) * 4TUBE tubePoints, nVerticalNodes + nSegments + 3, 1+2+4+16+32,	USE(pathPointsNum)