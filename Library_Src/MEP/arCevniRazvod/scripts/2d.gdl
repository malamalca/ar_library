HOTSPOT2 0, 0, unID : unID = unID + 1offsetLinesShow = GLOB_SCALE < showOffsetLinesScales[iOffsetShow] IF textShow THEN	faceCode = textBold + textItalic*2 + textUnderline*4	!textHeight = textHeight / GLOB_SCALE * 1000	DEFINE STYLE "Oznaka" textFont, textHeight, 5, faceCode	STYLE "Oznaka"	PEN textPen	!!! -------- height --------	!!rrr = request ("Height_of_style", "Oznaka", height)	!!height = height * GLOB_SCALE / 1000		ADD2 textPosX, textPosY	ROT2 textAngle	VARIABLES[1][1] = "length"	VARIABLES[1][2] = STR("%*1.1m", totalLength)		VARIABLES[2][1] = "diameter"	VARIABLES[2][2] = STR("%*1.0mm", A)	VARIABLES[3][1] = "slope"	VARIABLES[3][2] = STR("%*1.1m", slope)	string_c = textLine1	GOSUB "formatString"	TEXT2 0, 0, string_c	DEL 2	! text hotspots	HOTSPOT2 textPosX, 0, unID, textPosY, 1+128  : unID = unID + 1	HOTSPOT2 textPosX, -1, unID, textPosY, 3 : unID = unID + 1	HOTSPOT2 textPosX, textPosY, unID, textPosY, 2 : unID = unID + 1	HOTSPOT2 0, textPosY, unID, textPosX, 1+128 : unID = unID + 1	HOTSPOT2 -1, textPosY, unID, textPosX, 3 : unID = unID + 1	HOTSPOT2 textPosX, textPosY, unID, textPosX, 2 : unID = unID + 1	! angle hotspots	HOTSPOT2 textPosX+(stw(textLine1)/2000*A_), textPosY, unID, textAngle, 4 : unID = unID + 1	HOTSPOT2 textPosX+(stw(textLine1)/2000*A_)*COS(textAngle), textPosY+(stw(textLine1)/2000*A_)*SIN(textAngle), unID, textAngle, 5 : unID = unID + 1	HOTSPOT2 textPosX, textPosY, unID, textAngle, 6 : unID = unID + 1	HOTSPOT2 textPosX, textPosY+(STW(textLine1)/2000*A_), unID, textAngle, 7: unID = unID + 1ENDIF! show start levelDEFINE STYLE "Ends" textFont, elevationsTextHeight  * 1000 / GLOB_SCALE, 5, faceCodeSTYLE "Ends"currentLen = 0FOR i = 1 TO nSegments	LINE_TYPE ltAxis	PEN penAxis	ROT2 directions[i]	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! main line and junctions	LINE2 0, 0, segments[i], 0	HOTLINE2 0,0, segments[i], 0	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! junction elevation	IF elevationsShow THEN		PEN penElevations		! GLOB_CSTORY_ELEV + 		if textAbsolute then			nodeElevation = GLOB_PROJECT_ALTITUDE + GLOB_CSTORY_ELEV + GLOB_ELEVATION + costumOffset - currentLen * slope/100		else			nodeElevation = GLOB_CSTORY_ELEV + GLOB_ELEVATION + costumOffset - currentLen * slope/100		endif		TEXT2 0, -A, STR("%*5.3", nodeElevation)		PEN penAxis	ENDIF	currentLen = currentLen + segments[i]	IF (i = 1) AND startingCircle THEN		PEN penOffset		LINE_TYPE ltCircle		CIRCLE2 0,0, A/2		LINE_TYPE ltAxis		PEN penAxis	ENDIF	IF (i = nSegments) AND endingCircle THEN		PEN penOffset		LINE_TYPE ltCircle		CIRCLE2 segments[i],0, A/2		LINE_TYPE ltAxis		PEN penAxis	ENDIF	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! JUNCTION main line	junctionLength = minJunctionLength	junctionWidth = minJunctionWidth	IF (i > 1) AND (ABS(directions[i]) < nix) THEN		IF junctionWidths[i] > minJunctionWidth THEN junctionWidth = junctionWidths[i]		IF junctionLengths[i] > minJunctionLength THEN junctionLength = junctionLengths[i]		IF ABS(junctions[i]) < nix THEN			! 2014-08-12			! draw circle when no junction			! junctions[i] = 0 means start of vertical connection			LINE_TYPE ltOffset			PEN penOffset			CIRCLE2 0, 0, junctionWidth / 2		ELSE					juncX = -junctionLength * COS(junctions[i])			juncY = -junctionLength * SIN(junctions[i])			LINE2 0, 0, juncX , juncY			HOTLINE2 0, 0, juncX, juncY				juncSign = -1			IF junctions[i] > 180 THEN juncSign = 1				! junction 2 offset endpoints			juncXZg = junctionWidth/2 * SIN(junctions[i])			juncYZg = junctionWidth/2 * COS(junctions[i])				juncP1X = juncX + juncSign * juncXZg			juncP1Y = juncY - juncSign * juncYZg				juncP2X = juncX - juncSign * juncXZg			juncP2Y = juncY + juncSign * juncYZg 		ENDIF	ENDIF	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! segment length hotspot	HOTSPOT2 0, 0, unID, segments[i], 1+128 : unID = unID + 1	HOTSPOT2 segments[i], 0, unID, segments[i], 2 : unID = unID + 1	HOTSPOT2 -1, 0, unID, segments[i], 3 : unID = unID + 1	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! segment angle hotspot - ONLY WHEN lockAngles = false	IF NOT(lockAngles) AND i > 1 THEN		HOTSPOT2 COS(directions[i]) * segments[i], -SIN(directions[i]) * segments[i], unID, directions[i], 4+128: unID = unID + 1		HOTSPOT2 segments[i]+A, 0, unID, directions[i], 5 : unID = unID + 1		HOTSPOT2 0, 0, unID, directions[i], 6 : unID = unID + 1	ENDIF		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! add segment hotspot	HOTSPOT2 0, 0, unID, insSegments[i], 1+128 : unID = unID + 1	HOTSPOT2 segments[i]/2, 0, unID, insSegments[i], 2 : unID = unID + 1	HOTSPOT2 -1, 0, unID, insSegments[i], 3 : unID = unID + 1	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! junction hotspots	IF (directions[i] = 0) AND (i > 1) THEN		! junction angle		HOTSPOT2 -minJunctionLength/2, 0, unID, junctions[i], 4+128: unID = unID + 1		HOTSPOT2 -minJunctionLength/2 * COS(junctions[i]), -minJunctionLength/2 * SIN(junctions[i]), unID, junctions[i], 5 : unID = unID + 1		HOTSPOT2 0, 0, unID, junctions[i], 6 : unID = unID + 1			IF (junctions[i] > 0) THEN			! junction length			HOTSPOT2 0, 0, unID, junctionLengths[i], 1+128 : unID = unID + 1			HOTSPOT2 juncX, juncY, unID, junctionLengths[i], 2 : unID = unID + 1			HOTSPOT2 -COS(junctions[i]), SIN(junctions[i]), unID, junctionLengths[i], 3 : unID = unID + 1				! junction width			HOTSPOT2 juncX, juncY, unID, junctionHalfWidths[i], 1, junctionWidths[i]: unID = unID + 1			HOTSPOT2 juncP2X, juncP2Y, unID, junctionHalfWidths[i], 2, junctionWidths[i] : unID = unID + 1			HOTSPOT2 2*juncP1X-juncP2X, 2*juncP1Y-juncP2Y, unID, junctionHalfWidths[i], 3, junctionWidths[i] : unID = unID + 1						! fixed spot on the other side			HOTSPOT2 juncP1X, juncP1Y, unID : unID = unID + 1		ELSE			! 2014-08-12			! draw circle on vertical connection			! hotspot for vertical junction width			HOTSPOT2 0, 0, unID, junctionHalfWidths[i], 1, junctionWidths[i]: unID = unID + 1			HOTSPOT2 0, junctionWidths[i]/2, unID, junctionHalfWidths[i], 2, junctionWidths[i] : unID = unID + 1			HOTSPOT2 0, -2*junctionWidths[i], unID, junctionHalfWidths[i], 3, junctionWidths[i] : unID = unID + 1		ENDIF	ENDIF	IF (iOffsetShow <> showOffsetLinesNever) AND ((iOffsetShow = showOffsetLinesAlways) OR (GLOB_SCALE <= showOffsetLinesScales[iOffsetShow])) THEN		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!		! OFFSET LINES AND JUNCTIONS		LINE_TYPE ltOffset		PEN penOffset			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!		! OFFSET JUNCTIONS		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!		juncDeltaOnMain = 0		juncDSpodaj = 0			IF (junctions[i] > 0) AND (ABS(directions[i]) < nix) AND (i > 1) THEN			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!			! JUNCTION offset lines						juncSign = -1			IF junctions[i] > 180 THEN juncSign = 1				juncDeltaOnMain = (A/2) / TAN(junctions[i])			juncDSpodaj = (junctionWidth/2) / SIN(junctions[i])				juncXZg = junctionWidth/2 * SIN(junctions[i])			juncYZg = junctionWidth/2 * COS(junctions[i])				D = A			LINE2 	juncSign * (juncDeltaOnMain + juncDSpodaj) , 					juncSign * A/2, 					juncP1X, juncP1Y				LINE2	juncSign * (juncDeltaOnMain - juncDSpodaj), 					juncSign * A/2, 					juncP2X, juncP2Y			ENDIF			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!		! OFFSET LINES		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!		deltaStart = TAN(directions[i]/2) * A/2				IF (i = nSegments) THEN 			nextDirection = 0		ELSE			nextDirection = directions[i+1]		ENDIF		deltaEnd = TAN(nextDirection/2) * A/2			if i > 1 then			juncStartDeltaSp = 0			juncStartDeltaZg = 0		else			juncStartDeltaSp = firstOffsetDelta			juncStartDeltaZg = -firstOffsetDelta		endif		IF (junctions[i] > 0) AND (ABS(directions[i]) < nix) AND (i > 1) THEN			juncDeltaOnMain = (A/2) / TAN(junctions[i])			juncDSpodaj = (junctionWidth/2) / SIN(junctions[i])			juncDelta = juncDSpodaj - juncDeltaOnMain			IF junctions[i] > 180 THEN				juncStartDeltaZg = juncDelta 			ELSE				juncStartDeltaSp = juncDelta 			ENDIF		ENDIF			juncEndDeltaSp = 0		juncEndDeltaZg = 0		IF (junctions[i+1] > 0) AND (ABS(directions[i+1]) < nix) AND (i < nSegments) THEN			nextJunctionWidth = junctionWidths[i+1]			IF nextJunctionWidth < minJunctionWidth THEN nextJunctionWidth = minJunctionWidth 				juncDeltaOnMain = (A/2) / TAN(junctions[i+1])			juncDSpodaj = (nextJunctionWidth/2) / SIN(junctions[i+1])			juncDelta = juncDeltaOnMain + juncDSpodaj 				IF junctions[i+1] > 180 THEN				juncEndDeltaZg = juncDelta 			ELSE				juncEndDeltaSp = juncDelta			ENDIF		ENDIF			lastOffsetLineNegativeDelta = 0					! 2014-09-07		! hotspot at the end of the line		IF i = nSegments THEN			lastOffsetLineNegativeDelta = lastOffsetDelta				! lastOffsetDelta hotspot editing			HOTSPOT2 segments[i]-deltaEnd + juncEndDeltaZg, A/2, unID, lastOffsetDelta, 1 + 128 : unID = unID + 1			HOTSPOT2 segments[i]-deltaEnd + juncEndDeltaZg - lastOffsetDelta, A/2, unID, lastOffsetDelta, 2 : unID = unID + 1			HOTSPOT2 segments[i]-deltaEnd + juncEndDeltaZg + 1, A/2, unID, lastOffsetDelta, 3 : unID = unID + 1			HOTSPOT2 segments[i]+deltaEnd - juncEndDeltaSp, -A/2, unID, lastOffsetDelta, 1 + 128 : unID = unID + 1			HOTSPOT2 segments[i]+deltaEnd - juncEndDeltaSp - lastOffsetDelta, -A/2, unID, lastOffsetDelta, 2 : unID = unID + 1			HOTSPOT2 segments[i]+deltaEnd - juncEndDeltaSp + 1, -A/2, unID, lastOffsetDelta, 3 : unID = unID + 1					ENDIF		! hotspot at the start of the line		IF i = 1 THEN			HOTSPOT2 deltaStart - juncStartDeltaZg - firstOffsetDelta, A/2, unID, firstOffsetDelta, 1 + 128 : unID = unID + 1			HOTSPOT2 deltaStart - juncStartDeltaZg, A/2, unID, firstOffsetDelta, 2 : unID = unID + 1			HOTSPOT2 deltaStart - juncStartDeltaZg - 1, A/2, unID, firstOffsetDelta, 3 : unID = unID + 1			HOTSPOT2 deltaStart - juncStartDeltaZg - firstOffsetDelta, -A/2, unID, firstOffsetDelta, 1 + 128 : unID = unID + 1			HOTSPOT2 deltaStart - juncStartDeltaZg, -A/2, unID, firstOffsetDelta, 2 : unID = unID + 1			HOTSPOT2 deltaStart - juncStartDeltaZg - 1, -A/2, unID, firstOffsetDelta, 3 : unID = unID + 1					ENDIF		LINE2 deltaStart - juncStartDeltaZg, A/2, segments[i]-deltaEnd + juncEndDeltaZg - lastOffsetLineNegativeDelta, A/2		LINE2 -deltaStart + juncStartDeltaSp, -A/2, segments[i]+deltaEnd - juncEndDeltaSp - lastOffsetLineNegativeDelta, -A/2	ENDIF		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! angle hotspot editing	IF i > 1 THEN		HOTSPOT2 COS(directions[i]) * A/2, -SIN(directions[i]) * A/2, unID, directions[i], 4+128 : unID = unID + 1		! base		HOTSPOT2 A/2, 0, unID, directions[i], 5 : unID = unID + 1		! moving		HOTSPOT2 0, 0, unID, directions[i], 6 : unID = unID + 1			! center of angle	ENDIF	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	! progress	ADD2 segments[i], 0NEXT i! end elevationPEN penElevationsIF elevationsShow THEN	if textAbsolute then		nodeElevation = GLOB_PROJECT_ALTITUDE + GLOB_CSTORY_ELEV + GLOB_ELEVATION + costumOffset - totalLength * slope/100	else		nodeElevation = GLOB_CSTORY_ELEV + GLOB_ELEVATION + costumOffset - totalLength * slope/100	endif	TEXT2 0, -A, STR("%*5.3", nodeElevation)ENDIFDEL nSegments*2EXIT"formatString":	FOR i = 1 TO VARDIM1(variables)		varName = variables[i][1]		varName = "<" + varName + ">"		WHILE strstr(string_c, varName) > 0 do			first_part = strsub(string_c, 1, strstr(string_c, varName)-1)			second_part = strsub(string_c, strstr(string_c, varName)+strlen(varName), strlen(string_c)-strlen(first_part)-strlen(varName))			string_c = first_part + variables[i][2] + second_part		endwhile	NEXT ireturn